#!/bin/bash
readonly VERSION=1.0.0
declare DEFAULT_FILE=docker-compose.yml
declare TEST_FILE=docker-compose-test.yml
declare CONTAINER=web
declare TEST_CONTAINER=web
declare LOG=false

main() {
  case $1 in
    rspec)
      rspec ${@:2}
    ;;
    rake)
      dc run $CONTAINER bundle exec rake ${@:2}
    ;;
    logs)
      logs ${@:2}
    ;;
    run)
      run ${@:2}
    ;;
    "exec")
      dce ${@:2}
    ;;
    ps)
      ps
    ;;
    clean)
      clean ${@:2}
    ;;
    stop)
      stop ${@:2}
    ;;
    kill)
      kill ${@:2}
    ;;
    install)
      install
    ;;
    uninstall)
      uninstall
    ;;
    file)
      create_file
    ;;
    env)
      echo DEFAULT_FILE $DEFAULT_FILE
      echo TEST_FILE $TEST_FILE
      echo CONTAINER $CONTAINER
    ;;
    -t)
      FILE=$TEST_FILE
      CONTAINER=$TEST_CONTAINER
      main ${@:2}
    ;;
    --version|version|-v)
      local name=$(this)
      # name=$(${name:0:1} | awk '{print toupper($0)})' ${name:1}
      echo "${name^} version $VERSION"
    ;;
    help|-h|-*)
      help
    ;;
    print)
      print
    ;;
    *)
      dc $@
    ;;
  esac
}

this(){
  echo ${0##*/}
}

filename(){
  echo ".$(this)file"
}

test_runner(){
  echo "${TEST_CONTAINER}_test_runner"
}

project_name(){
  printf '%q\n' "${PWD##*/}" | sed -e 's/\-//g'
}

loadfile() {
  local filename=$(filename)
  if [ -r $filename ]; then
    . $filename
  fi
}

my_exec() {
  if [ "$LOG" == "true" ]; then
    echo "$@"
  fi
  $@
}

dc() {
  my_exec docker-compose -f $FILE $@
}

dcd() {
  my_exec docker-compose -f $DEFAULT_FILE $@
}

dct() {
  my_exec docker-compose -f $TEST_FILE -p "$(project_name)test" $@
}

dce() {
  local cont=$(find_container $1)
  local cmd=$(find_command ${@:2})
  echo 'docker exec -it '$cont $cmd
  docker exec -it $cont $cmd
}

find_command() {
  local cmd=$1
  if [ -z $cmd ]; then
    echo 'bash'
  else
    echo $@
  fi
}

find_container() {
  local cont=$(ps | grep $1)
  cont=${cont/%\ */}
  echo $cont
}

is_running() {
  if [ -z "$1" ]; then
    echo "false"
  else
    echo "$(docker inspect -f {{.State.Running}} $1)"
  fi
}

rspec() {
  dct run $TEST_CONTAINER bundle exec rspec $@
}

logs() {
  case $1 in
    "")
      dc logs -f --tail=100 $CONTAINER
    ;;
    all)
      dc logs -f --tail=100
    ;;
    clear)
      logs_clear ${@:2}
    ;;
    *)
      dc logs -f --tail=100 $@
    ;;
  esac
}

logs_clear() {
  if [ -z $@ ]; then
    echo "Need to inform a container, use:"
    echo "$(this) logs clear <container name>"
  else
    echo "Clear logs from [$@]"
    for container in $@; do
      logs_clear_compose $container
    done
  fi
}

logs_clear_compose() {
  local cont=$(dc ps | grep $1)
  cont=${cont/%\ */}
  clear_logs_from_container $cont
}

clear_logs_from_container() {
  sudo rm $(docker inspect $1 | grep -G '"LogPath": "*"' | sed -e 's/.*"LogPath": "//g' | sed -e 's/",//g');
}

run() {
  case $1 in
    "")
      dc run $CONTAINER bash
    ;;
    *)
      dc run $@
    ;;
  esac
}

ps() {
  dcd ps
  echo "-"
  dct ps
}

stop() {
  dcd stop $@
  dct stop $@
}

kill() {
  dcd kill $@
  dct kill $@
}

clean() {
  case $1 in
    containers)
      docker rm $(docker ps -a -q)
    ;;
    images)
      docker rmi $(docker images | awk '/^<none>/ { print $3 }')
    ;;
  esac
}

install() {
  sudo cp $0 /usr/bin
}

uninstall(){
  sudo rm $0
}



create_file() {
  cat >> "$(filename)" <<-FILE

# This is a Sample .limafile

DEFAULT_FILE=docker-compose.yml
TEST_FILE=docker-compose-test.yml
CONTAINER=web
TEST_CONTAINER=web
LOG=false
FILE
  chmod +x .limafile
}

help() {
  cat <<-TEXT
A wrapper tool to help to work with containers.

Usage:
  $(this) [-t] [helper] [command] [args]

Options:
  -t                      Use test file on docker-compose

Helpers:
  rspec                   Call docker-compose with test_file, so you just need to write the end of the command
  rake                    Call docker-compose to execute a rake task

  logs                    Show default container logs
  logs all                Show all logs
  logs clear <container>  Clear logs from container
  logs <container>        Show logs for container

  run                     Run the default container with bash command
  run <container> <cmd>   Run the container with command
  exec <container> <cmd>  Run the command on a running container

  ps                      Call docker-compose with default and test files

  stop                    Stop all containers
  stop <container>        Stop the container
  kill                    Kill all containers
  kill <container>        Kill the container

  clean images            Remove all image
  clean containers        Remove stoped containers

  intall                  Copy this bash to /usr/bin
  uninstall               Remove this from /usr/bin
  file                    Create the helper file, this will enable you to setup this tool

  help                    Show this help
  version                 Show the version of this helper

  <any>                   Will be passed into docker-compose

TEXT
}

print() {
# generated with
# http://www.text-image.com/convert/pic2ascii.cgi
# http://patorjk.com/software/taag/#p=display&f=Sub-Zero&t=Lima
  cat <<"TEXT"

     `-::-`
    .ssssss+-`
    /ss:.-:oso:`
    .oo+../sssso/`
     `+o+ossyyssso:
      `/oooosssysss+`
        -+ooossssssso-
         ./+ooosssssso:`
           ./++ooosssss+.
             ./+oooosssso/`
               `:++oossssso-
                 `:+oossssss/`
                   `:+oossssssoo/`
                     `-+oossysso/`
                       `:osssos/`.
                        `+oooo++//:.
                        `-/-`.+/////:`
                             `-///////:`
                               `:////+oo-
                                 ./++oooo+.
                                   -+oooooo/`
                                    `:ooooooo:`
                                      `+ooooooo-
                                        -+oooooo+.
                                         `:ooooooo/`
                                           `/oooo+oo:`
                                             .+oooooo+-
                                               -ooooooo+.
                                                `:ooooooo/`
                                                  `/soooooo-
                                                    .+oooooo+.
                                                      -+oooooo/`
                                                        -ooooooo-
                                                         `:ooo++o+.
                                                           `/ooo++o:`
 __         __     __    __     ______                       ./oo++++.
/\ \       /\ \   /\ "-./  \   /\  __ \                        ./oo++o/`
\ \ \____  \ \ \  \ \ \-./\ \  \ \  __ \                         -+oo+++-
 \ \_____\  \ \_\  \ \_\ \ \_\  \ \_\ \_\                          -+oo+o/`
  \/_____/   \/_/   \/_/  \/_/   \/_/\/_/                            -+ooo+`
                                                                        -+:`

TEXT
}

loadfile
declare FILE=$DEFAULT_FILE
main $@
