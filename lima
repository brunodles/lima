#!/bin/bash
readonly VERSION=2.0.1
readonly MODULE_NAMES=('ruby')
declare DEFAULT_FILE=docker-compose.yml
declare TEST_FILE=docker-compose.yml
declare TEST_CONTAINER=web
declare LOG=false

main() {
  case $1 in
    logs)
      logs ${@:2}
    ;;
    run)
      run ${@:2}
    ;;
    "exec")
      dce ${@:2}
    ;;
    up)
      up ${@:2}
    ;;
    ps)
      ps
    ;;
    clean)
      clean ${@:2}
    ;;
    stop)
      stop ${@:2}
    ;;
    kill)
      kill ${@:2}
    ;;
    install)
      install ${@:2}
    ;;
    uninstall)
      uninstall ${@:2}
    ;;
    module|modules)
      module ${@:2}
    ;;
    file)
      create_file
    ;;
    -t)
      dcFile=$TEST_FILE
      dcProject="$(project_name)test"
      dcContainer=$TEST_CONTAINER
      main ${@:2}
    ;;
    --version|version|-v)
      local name=$(this)
      echo "${name^} version $VERSION"
    ;;
    help|-h|-*)
      help
    ;;
    print)
      print
    ;;
    dc)
      dc ${@:2}
    ;;
  esac
  load_modules
  send_to_modules $@
}

this(){
  echo ${0##*/}
}

this_path(){
  echo "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
}

filename(){
  echo ".$(this)file"
}

test_runner(){
  echo "${TEST_CONTAINER}_test_runner"
}

project_name(){
  printf '%q\n' "${PWD##*/}" | sed -e 's/\-//g'
}

loadfile() {
  if [ -r $1 ]; then
    . $1
  fi
}

load_modules() {
  for module in ${MODULE_NAMES[@]} ; do
    loadfile $(module_path $module)
  done
}

module_path() {
  echo "$(this_path)/$(this)_${1}"
}

module_url() {
  echo "https://raw.githubusercontent.com/brunodles/lima/${VERSION}/${1}"
}

send_to_modules() {
  for module in ${MODULE_NAMES[@]} ; do
    if [ -r "$(module_path $module)" ]; then
      (${module}_main $@)
    fi
  done
}

my_exec() {
  if [ "$LOG" == "true" ]; then
    echo "$@"
  fi
  $@
}

dc() {
  if [ -r $dcFile ]; then
    my_exec docker-compose -f $dcFile -p "$dcProject" $@
  else
    my_exec docker-compose -p "$dcProject" $@
  fi
}

dcd() {
  my_exec docker-compose -f $DEFAULT_FILE $@
}

dct() {
  my_exec docker-compose -f $TEST_FILE -p "$(project_name)test" $@
}

dce() {
  local cont=$(find_container $1)
  local cmd=$(find_command ${@:2})
  echo 'docker exec -it '$cont $cmd
  docker exec -it $cont $cmd
}

find_command() {
  local cmd=$1
  if [ -z $cmd ]; then
    echo 'bash'
  else
    echo $@
  fi
}

find_container() {
  local cont=$(ps | grep $1)
  cont=${cont/%\ */}
  echo $cont
}

is_running() {
  if [ -z "$1" ]; then
    echo "false"
  else
    echo "$(docker inspect -f {{.State.Running}} $1)"
  fi
}

logs() {
  case $1 in
    "")
      dc logs -f --tail=100 $dcContainer
    ;;
    all)
      dc logs -f --tail=100
    ;;
    clear)
      logs_clear ${@:2}
    ;;
    *)
      dc logs -f --tail=100 $@
    ;;
  esac
}

logs_clear() {
  if [ -z $@ ]; then
    echo "Need to inform a container, use:"
    echo "$(this) logs clear <container name>"
  else
    echo "Clear logs from [$@]"
    for container in $@; do
      logs_clear_compose $container
    done
  fi
}

logs_clear_compose() {
  local cont=$(dc ps | grep $1)
  cont=${cont/%\ */}
  clear_logs_from_container $cont
}

clear_logs_from_container() {
  sudo rm $(docker inspect $1 | grep -G '"LogPath": "*"' | sed -e 's/.*"LogPath": "//g' | sed -e 's/",//g');
}

run() {
  case $1 in
    "")
      dc run $dcContainer bash
    ;;
    *)
      dc run $@
    ;;
  esac
}

up() {
  case $1 in
    all|"")
      dc up -d
      logs all
    ;;
    *)
      dc up -d ${@:2}
      logs ${@:2}
    ;;
  esac
}

ps() {
  dcd ps
  echo "-"
  dct ps
}

stop() {
  dcd stop $@
  dct stop $@
}

kill() {
  dcd kill $@
  dct kill $@
}

clean() {
  case $1 in
    containers)
      docker rm $(docker ps -a -q)
    ;;
    images)
      docker rmi $(docker images | awk '/^<none>/ { print $3 }')
    ;;
  esac
}

install() {
  sudo cp $0 /usr/bin
}

uninstall(){
  for module in ${MODULE_NAMES[@]} ; do
    module_uninstall $module
  done
  sudo rm $0
}

module() {
  case $1 in
    "")
      module_list
    ;;
    -l)
      echo "Modules to install: ${MODULE_NAMES[@]}"
    ;;
    -i)
      module_install $2
      # if [ -z "$3" ]; then
      #   module -i ${@:3}
      # fi
    ;;
    -u)
      module_uninstall $2
      # if [ -z "$3" ]; then
      #   uninstall ${@:3}
      # fi
    ;;
  esac
}

module_list() {
  local list=""
  for module in ${MODULE_NAMES[@]} ; do
    if [ -r "$(module_path $module)" ]; then
      list="$list $module"
    fi
  done
  echo "Installed modules: $list"
}

module_install(){
  local module="$(this)_$1"
  if [ -r "$module" ]; then
    echo ".add $module"
    sudo cp $module /usr/bin
  # else
  #   my_exec sudo curl -o "/usr/bin/${module}" $(module_url $module)
  #   if [ grep -Fxq "Not Found" "/usr/bin/${module}" ]; then
  #     my_exec sudo rm "/usr/bin/${module}"
  #   fi
  fi
}

module_uninstall(){
  local module="$(module_path $1)"
  if [ -r $module ]; then
    echo ".remove $1"
    sudo rm $module
  else
    echo "${1^} module is not installed "
  fi
}

create_file() {
  cat >> "$(filename)" <<-FILE

# This is a Sample $(filename)

DEFAULT_FILE=docker-compose.yml
TEST_FILE=docker-compose-test.yml
CONTAINER=web
TEST_CONTAINER=web
LOG=false
FILE
  chmod +x $(filename)
}

help() {
  cat <<-TEXT
A wrapper tool to help to work with containers.

Usage:
  $(this) [-t] [helper] [command] [args]

Options:
  -t                      Use test file on docker-compose

Helpers:
  logs                    Show default container logs
  logs all                Show all logs
  logs clear <container>  Clear logs from container
  logs <container>        Show logs for container

  up                      Run all containers in daemon and start logs
  up <containers>         Run selected containers in daemon and start logs
  run                     Run the default container with bash command
  run <container> <cmd>   Run the container with command
  exec <container> <cmd>  Run the command on a running container

  ps                      Call docker-compose with default and test files

  stop                    Stop all containers
  stop <container>        Stop the container
  kill                    Kill all containers
  kill <container>        Kill the container

  clean images            Remove all image
  clean containers        Remove stoped containers

  install                 Copy this bash to /usr/bin
  uninstall               Remove this from /usr/bin
  file                    Create the helper file, this will enable you to setup this tool

  module                  List installed modules
  module -l               List all installable modules
  module -i <name>        Install a module
  module -u <name>        Uninstall a module

  help                    Show this help
  version                 Show the version of this helper

  dc                      Will be passed into docker-compose

TEXT
}

print() {
# generated with
# http://www.text-image.com/convert/pic2ascii.cgi
# http://patorjk.com/software/taag/#p=display&f=Sub-Zero&t=Lima
  cat <<"TEXT"

     `-::-`
    .ssssss+-`
    /ss:.-:oso:`
    .oo+../sssso/`
     `+o+ossyyssso:
      `/oooosssysss+`
        -+ooossssssso-
         ./+ooosssssso:`
           ./++ooosssss+.
             ./+oooosssso/`
               `:++oossssso-
                 `:+oossssss/`
                   `:+oossssssoo/`
                     `-+oossysso/`
                       `:osssos/`.
                        `+oooo++//:.
                        `-/-`.+/////:`
                             `-///////:`
                               `:////+oo-
                                 ./++oooo+.
                                   -+oooooo/`
                                    `:ooooooo:`
                                      `+ooooooo-
                                        -+oooooo+.
                                         `:ooooooo/`
                                           `/oooo+oo:`
                                             .+oooooo+-
                                               -ooooooo+.
                                                `:ooooooo/`
                                                  `/soooooo-
                                                    .+oooooo+.
                                                      -+oooooo/`
                                                        -ooooooo-
                                                         `:ooo++o+.
                                                           `/ooo++o:`
 __         __     __    __     ______                       ./oo++++.
/\ \       /\ \   /\ "-./  \   /\  __ \                        ./oo++o/`
\ \ \____  \ \ \  \ \ \-./\ \  \ \  __ \                         -+oo+++-
 \ \_____\  \ \_\  \ \_\ \ \_\  \ \_\ \_\                          -+oo+o/`
  \/_____/   \/_/   \/_/  \/_/   \/_/\/_/                            -+ooo+`
                                                                        -+:`

TEXT
}

loadfile $(filename)
declare dcContainer=$CONTAINER
declare dcFile=$DEFAULT_FILE
declare dcProject=$(project_name)
main $@
