#!/bin/bash
ruby_main() {
  case $1 in
    rspec)
      rspec ${@:2}
    ;;
    bundle)
      dc run $dcContainer bundle ${@:2}
    ;;
    bexec)
      dc run $dcContainer bundle exec ${@:2}
    ;;
    rake)
      dc run $dcContainer bundle exec rake ${@:2}
    ;;
    kill)
      rspec rm
    ;;
    help|-h)
      ruby_help
    ;;
  esac
}

rspec() {
  case $1 in
    up)
      dct run --rm --name $(test_runner) $TEST_CONTAINER bash
    ;;
    rm)
      # local cont="$(find_container $(test_runner))"
      my_exec docker stop $(test_runner) >/dev/null 2>&1
      my_exec docker rm $(test_runner) >/dev/null 2>&1
    ;;
    *)
      local cont="$(find_container $(test_runner))"
      if [ "$(is_running $cont)" == "true" ]; then
        dce $(test_runner) bundle exec rspec $@
      else
        dct run $TEST_CONTAINER bundle exec rspec $@
      fi
    ;;
  esac
}

ruby_help() {
  cat <<-TEXT
Ruby-Helpers:
  rspec <command>         Call docker-compose with test_file, so you just need to write the end of the command
  bundle <command>        Call docker-compose to execute bundle, on the default conatiner
  bexec <command>         Call docker-compose to execute a rake task, on the default conatiner
  rake <command>          Call docker-compose to execute a rake task, on the default conatiner
TEXT
}

# loadfile
# source lima
# main $@
